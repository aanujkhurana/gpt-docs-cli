// Example file with JSDoc comments generated by gpt-docs

/**
 * Calculates the total price including tax for a list of items
 * @param {Array<{price: number}>} items - Array of items with price property
 * @param {number} taxRate - The tax rate as a decimal (e.g., 0.1 for 10%)
 * @returns {number} The total price including tax
 */
function calculateTotal(items, taxRate) {
  const subtotal = items.reduce((sum, item) => sum + item.price, 0);
  const tax = subtotal * taxRate;
  return subtotal + tax;
}

/**
 * Represents a shopping cart that manages items and calculates totals
 * @class
 */
class ShoppingCart {
  /**
   * Creates a new shopping cart instance
   * @constructor
   */
  constructor() {
    this.items = [];
  }
  
  /**
   * Adds an item to the shopping cart
   * @param {Object} item - The item to add to the cart
   * @param {number} item.id - Unique identifier for the item
   * @param {string} item.name - Name of the item
   * @param {number} item.price - Price of the item
   * @returns {void}
   */
  addItem(item) {
    this.items.push(item);
  }
  
  /**
   * Removes an item from the shopping cart by its ID
   * @param {number} id - The ID of the item to remove
   * @returns {boolean} True if the item was removed, false if not found
   */
  removeItem(id) {
    const index = this.items.findIndex(item => item.id === id);
    if (index !== -1) {
      this.items.splice(index, 1);
      return true;
    }
    return false;
  }
  
  /**
   * Calculates the total price of all items in the cart including tax
   * @param {number} [taxRate=0.1] - The tax rate as a decimal (default: 0.1 for 10%)
   * @returns {number} The total price including tax
   */
  getTotal(taxRate = 0.1) {
    return calculateTotal(this.items, taxRate);
  }
}

/**
 * Formats a number as a currency string with dollar sign and two decimal places
 * @param {number} amount - The amount to format
 * @returns {string} The formatted currency string (e.g., "$10.99")
 */
const formatCurrency = (amount) => {
  return `$${amount.toFixed(2)}`;
};

// Usage example
const cart = new ShoppingCart();
cart.addItem({ id: 1, name: 'Book', price: 10.99 });
cart.addItem({ id: 2, name: 'Pen', price: 1.99 });
const total = cart.getTotal();
console.log(`Total: ${formatCurrency(total)}`);